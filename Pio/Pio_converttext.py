#webpath = '/Library/WebServer/Documents'				#for testing purposes#pobjstmt = ''#startrec = 0#rowcount = 1#strip all html#found here:#http://mail.python.org/pipermail/email-sig/2003-November/000034.html##Matthew Dixon Cowles matt at mondoinfo.com#Fri Nov 21 15:18:55 EST 2003## Very slightly modified from Alex Martelli's news post# <9cpm4202cv1 at news1.newsguy.com> of May 2, 2001,# Subject: Stripping HTML tags from a string# Thanks, Aleximport sgmllibclass Cleaner(sgmllib.SGMLParser):	entitydefs={"nbsp": " "} # I'll break if I want to	def __init__(self):		sgmllib.SGMLParser.__init__(self)		self.result = []	def do_p(self, *junk):		self.result.append('\n')	def do_br(self, *junk):		self.result.append('\n')	def handle_data(self, data):		self.result.append(data)	def cleaned_text(self):		return ''.join(self.result)def stripHTML(text):	c=Cleaner()	try:		c.feed(text)	except sgmllib.SGMLParseError:		raise ValueError,"Unable to parse HTML"	else:		t=c.cleaned_text()		return t#thanks Matthew Dixon Cowles (lots of good recipes!)	and Thanks Alex Martelli	 -calvindef geturl_info(urltext):	n = urltext.find('>') + 1	nn = urltext.find('</a>')	taggedtext = urltext[n:nn]	url = urltext[0:n]	m = url.find('href=') +5	url = url[m:len(url)]	url = url.replace('>', '')	url = url.replace('"', '')	return url, taggedtextdef convert_anchors(conversioncode, urltext):			#anchors to coded urls	new_urltext = ''	biblio_url = ''	url, taggedtext = geturl_info(urltext)	if conversioncode == '[a]':		new_urltext = '[url:%s]%s' % (url, taggedtext)	if conversioncode == 'a[]' or conversioncode == 'a':		new_urltext = ' url:%s[%s]' % (url, taggedtext)	if conversioncode == '[]a':		new_urltext = '[%s]url:%s ' % (taggedtext, url)		#below are bibliographic text conversions	if conversioncode == '[]*a' or conversioncode == '[]a*':		new_urltext = '[%s]*' % (taggedtext)		biblio_url = '[%s] - %s\n' % (taggedtext, url)	if conversioncode == '*[a]':		new_urltext = '%s*' % (taggedtext)		biblio_url = '\n%s- [%s]' % (taggedtext, url)		#-a causes the url to be removed	if conversioncode == '-a':		new_urltext = '%s' % (taggedtext)		return new_urltext, biblio_urldef convert_backtoanchors(text):		#excludes bibliographic text conversions	#to unconvert url:[text] or similar url info requires that the url itself contain no spaces.	#converting text to html will look for urls encoded as those in the convert_anchors module above	u = 0	while u != -1:		u = 0		while u != -1:			u = text.find('url:')			if u != -1:				if text[u-1] == ']':					#[]a					#format [text]url:address					uu = text.find(' ', u)					if uu != -1:						url = text[u+4:uu]						utxt = u						while text[utxt] != '[' and text[utxt:utxt+4] != '[img':							utxt -= 1						anchortext = text[utxt:u-1]						##add http:// to url when missing						if url[0:7] != 'http://' and url[0:6] != 'ftp://':							url = 'http://' + url						replurl = '<a href="%s">%s</a>' % (url, anchortext)						text = text.replace(text[utxt-1:uu],replurl) 				elif  text[u-1] == '[':					#[a]					#format [url:address]text  					#-- note this can only identify the first word of the prior anchor text					#added code to identify <img or [img					u = u-1					uu = text.find(']')					if uu != -1:						uu += 1						url = text[u+5:uu-1]						utxt = text.find(' ', uu+1)						if text[uu:utxt].find('[img') != -1:							utxt = text.find(']', uu + 1)+1						elif text[uu:utxt].find('<img') != -1:							utxt = text.find('>', uu + 1)+1						anchortext = text[uu:utxt]						##add http:// to url when missing						if url[0:7] != 'http://' and url[0:6] != 'ftp://':							url = 'http://' + url						replurl = '<a href="%s">%s</a>' % (url, anchortext)						text = text.replace(text[u:utxt],replurl) 										#this is the authoritative way to do it url:anchor[text], or [text]url:anchor				#a[]				else:						#format url:address[text]					uu = text.find('[', u)					if uu != -1:						url = text[u+4:uu]						utxt = text.find(']', uu) 						if utxt != -1:		#missing bracket do nothing							utxt += 1							if text[uu:utxt].find('[img') != -1:		#only worried about img bracket here.								utxt = text.find(']', utxt+1)+1							anchortext = text[uu+1:utxt-1]							##add http:// to url when missing							if url[0:7] != 'http://' and url[0:6] != 'ftp://':								url = 'http://' + url							replurl = '<a href="%s">%s</a>' % (url, anchortext)							text = text.replace(text[u:utxt],replurl) 										return text	#do a global replace of ' </a> ' (double spacing)def conversion_by_code(conversioncode, text, pobjpgm):	#	print 'converting code %s,   pobjpgm %s' % (conversioncode, pobjpgm)#	print str(conversioncode.lower() == 'br' and pobjpgm == 'Pio_converttohtml')		if conversioncode == 'br' and pobjpgm == 'Pio_converttohtml':		text = text.replace('\n', '<br>')	if conversioncode == 'p' and pobjpgm == 'Pio_converttotext':		text = text.replace('<p>\n\n', '\n\n')		text = text.replace('<P>\n\n', '\n\n')		text = text.replace('<p>\n', '\n\n')		text = text.replace('<P>\n', '\n\n')		text = text.replace('<p>', '\n\n')		text = text.replace('<P>', '\n\n')	if conversioncode.lower() == 'br' and pobjpgm == 'Pio_converttotext':		text = text.replace('<br>\n', '\n')		text = text.replace('<BR>\n', '\n')		text = text.replace('<br>', '\n')		text = text.replace('<BR>', '\n')		if conversioncode.find('a') > -1 and pobjpgm == 'Pio_converttotext':		#convert anchor tags to coded urls		n = 0		nn = 0		while n > -1:			n = text.find('<a')			if n > -1:				nn = text.find('</a>', n) + 4				if nn != 3:		# -1 + 4					new_urltext, biblio_url = convert_anchors(conversioncode, text[n:nn])					text = text.replace(text[n:nn], new_urltext)					if biblio_url != '':						text += biblio_url				else:		#break loop because of missing anchor close tag.					n = -1		if conversioncode.find('a') > -1 and pobjpgm == 'Pio_converttohtml':		#convert coded urls to actual anchor tags		text = convert_backtoanchors(text)		#img conversion both directions using [img].  [imgfull] can be used to save the whole tag info when converting from <img to [img	if conversioncode.find('img') != -1:		if pobjpgm == 'Pio_converttotext':			n = 0			nn = 0			while n != -1:				n = text.find('<img', nn)				if n != -1:						nn = text.find('>', n)						if nn != -1:							imgtag = text[n:nn+1]							if conversioncode.find('imgfull') != -1:								replimg = '[%s]' % (imgtag[1:len(imgtag)-1] )								text = text.replace(text[n:nn+1], replimg)							else:								g = imgtag.find('src="')								if g != -1:									gg = imgtag.find('"', g+5)									if gg != 0:										replimg = '[img %s]' % (imgtag[g+5:gg])										text = text.replace(text[n:nn+1], replimg)									else:										n = -1		#break loop for failed end of source message.				if pobjpgm == 'Pio_converttohtml':			n = 0			nn = 0			while n != -1:				n = text.find('[img', nn)				if n != -1:					nn = text.find(']', n)					if nn != -1:						replimg = text[n:nn+1]						if replimg.find('src=') != -1:							replimg = replimg.replace('[', '<')							replimg = replimg.replace(']', '>')							text = text.replace(text[n:nn+1], replimg)						else:							replimg = replimg.replace('[img ', '<img src="')							replimg = replimg.replace(']', '">')							text = text.replace(text[n:nn+1], replimg)											else:						n = -1		#break for missing bracket			if conversioncode.upper() == 'ALL' and pobjpgm == 'Pio_converttotext':		text = stripHTML(text)#		print '%s THETEXT: %s' % (conversioncode.upper(), text)		return text##here is an example of records that should be returned:##((field1, "field2", "field3"), (field1, "field2", "field3"), (field1, "field2", "field3"), (field1, "field2", "field3"))def converttext(pobjpgm, pobjstmt):		#below are the types of objects returned, tuple/list, string, string and integer	records = []	rcdserr = ''	rcdsautherr = ''	nextrecnmbr = 0		text = ''		if pobjstmt > '':		c = pobjstmt.find('<pconvert>')		if c != -1:			cc = pobjstmt.find('</pconvert>', c)			if cc != -1:				text = pobjstmt[cc+11:len(pobjstmt)]				the_conversioncodes = pobjstmt[c+10:cc].replace(' ', '').split(',')				for i in the_conversioncodes:					text = conversion_by_code(i, text, pobjpgm)#					print i			else:				text = pobjstmt				rcdserr = 'Missing pconvert close tag for %s' % (pobjpgm)		else:			text = pobjstmt			the_conversioncodes = ['[img]', 'a[]', 'p', 'br', 'all']			for i in the_conversioncodes:				text = conversion_by_code(i, text, pobjpgm)#				print i		records = ((text,),)	return records, rcdserr, rcdsautherr, nextrecnmbr